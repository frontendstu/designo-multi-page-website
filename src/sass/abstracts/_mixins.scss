// =============================================================================
// MIXINS
//
// The mixins partial contains the project Sass mixins to promote consistency
// of styles and reduce the need to repeat long styles.
// =============================================================================

// -----------------------------------------------------------------------------
// FONT FACE
//
// Generates a `@font-face` rule for importing custom fonts. The font-face
// mixin simplifies font registration.
// -----------------------------------------------------------------------------

@mixin font-face($url, $family, $weight, $style: normal) {
    @font-face {
        src: url($url);
        font-weight: $weight;
        font-family: $family;
        font-style: $style;
        font-display: swap;
    }
}

// -----------------------------------------------------------------------------
// LINK STATES
//
// These mixins provide reusable patterns for managing link and interactive
// element states. They also use common pseudo-class combinations to ensure
// consistent styling and accessibility across the UI.
//
// Available mixins
// - hover          : Applies styles on `:hover` only
// - hover-focus    : Applies styles on `:hover` and `:focus`
// - focus          : Applies styles on `:focus`
// - focus-within   : Applies styles on `:focus-within`
// - focus-all      : Applies styles on `:focus` and `:focus-within`
// -----------------------------------------------------------------------------

@mixin hover {
    &:hover {
        @content;
    }
}

@mixin hover-focus {
    &:hover,
    &:focus {
        @content;
    }
}

@mixin focus {
    &:focus {
        @content;
    }
}

@mixin focus-within {
    &:focus-within {
        @content;
    }
}

@mixin focus-all {
    &:focus,
    &:focus-within {
        @content;
    }
}

// -----------------------------------------------------------------------------
// FLEXBOX
//
// The flexbox mixin provides a shorthand utility for applying common Flexbox
// layout properties in a consistent and readable manner. It simplifies the
// declaration of `display: flex;` along with optional arguments and direction
// settings.
// -----------------------------------------------------------------------------

@mixin flex($align: center, $justify: center, $direction: column, $gap: null) {
    display: flex;
    align-items: $align;
    justify-content: $justify;
    flex-direction: $direction;

    @if $gap != null {
        gap: $gap;
    }
}

// -----------------------------------------------------------------------------
// SIZE
//
// The size mixin provides a shorthand for declaring common sizing properties.
// -----------------------------------------------------------------------------

@mixin size(
    $width: null,
    $height: null,
    $max-width: null,
    $max-height: null,
    $min-width: null,
    $min-height: null
) {
    @if $width != null {
        width: $width;
    }

    @if $height != null {
        height: $height;
    }

    @if $max-width != null {
        max-width: $max-width;
    }

    @if $max-height != null {
        max-height: $max-height;
    }

    @if $min-width != null {
        min-width: $min-width;
    }

    @if $min-height != null {
        min-height: $min-height;
    }
}

// -----------------------------------------------------------------------------
// POSITION
//
// A position shorthadn utility for declaring layout positioning.
// -----------------------------------------------------------------------------

@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
    // Define the valid position types
    $valid-types: static, relative, absolute, fixed, sticky;

    @if index($valid-types, $type) {
        position: $type;

        @if $top != null {
            top: $top;
        }

        @if $right != null {
            right: $right;
        }

        @if $bottom != null {
            bottom: $bottom;
        }

        @if $left != null {
            left: $left;
        }
    } @else {
        @error "â›” Invalid position type: #{$type}. Type must be one of: #{$valid-types}.";
    }
}
